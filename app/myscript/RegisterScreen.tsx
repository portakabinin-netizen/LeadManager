// RegisterScreen.tsx
import { Ionicons } from "@expo/vector-icons";
import { Picker } from "@react-native-picker/picker";
import axios from "axios";
import { useRouter } from "expo-router";
import React, { useState } from "react";
import {
  ActivityIndicator,
  KeyboardAvoidingView,
  Modal,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";
import Toast from "react-native-toast-message";
import api_url from "../../backend/routes/base_url"; // ensure this is correct (e.g. http://10.0.2.2:3000 or your server url)

export default function RegisterScreen() {
  const router = useRouter();

  // form states
  const [role, setRole] = useState("");
  const [name, setName] = useState("");
  const [mobile, setMobile] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [pan, setPan] = useState("");
  const [aadhaar, setAadhaar] = useState("");
  const [isFormUnlocked, setIsFormUnlocked] = useState(false);
  const [loading, setLoading] = useState(false);

  // corporate modal & fields
  const [modalVisible, setModalVisible] = useState(false);
  const [corporateType, setCorporateType] = useState("");
  const [corporateName, setCorporateName] = useState("");
  const [corporatePan, setCorporatePan] = useState("");
  const [address, setAddress] = useState("");
  const [city, setCity] = useState("");
  const [stateName, setStateName] = useState(""); // avoid JS reserved 'state'
  const [pin, setPin] = useState("");
  const [gst, setGst] = useState("");

  // For non-admin users: require corporateId to link
  const [corporateIdForUser, setCorporateIdForUser] = useState("");

  const panRegex = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/;
  const aadhaarRegex = /^[0-9]{12}$/;
  const mobileRegex = /^[6-9]\d{9}$/;
  const pinRegex = /^[1-9][0-9]{5}$/;

  // Unlock form on valid PAN/Aadhaar (but only when user completes correct length or onBlur)
  const handlePanChange = (value: string) => {
    const upper = value.toUpperCase();
    setPan(upper);
    setIsFormUnlocked(panRegex.test(upper));
  };
  const handleAadhaarChange = (value: string) => {
    const cleaned = value.replace(/[^0-9]/g, "");
    setAadhaar(cleaned);
    setIsFormUnlocked(aadhaarRegex.test(cleaned));
  };

  const handleRoleChange = (val: string) => {
    setRole(val);
    // reset identifiers when role changes
    setPan("");
    setAadhaar("");
    setIsFormUnlocked(false);
  };

  const handleCorporatePanChange = (val: string) => setCorporatePan(val.toUpperCase());

  // Validation helper - returns {ok, message}
  const validateBeforeSubmit = () => {
    if (!role) return { ok: false, message: "Select a role" };
    if (!name) return { ok: false, message: "Enter full name" };
    if (!mobile || !mobileRegex.test(mobile)) return { ok: false, message: "Enter a valid 10-digit mobile number" };
    if (!password || password.length < 6) return { ok: false, message: "Password must be at least 6 characters" };
    if (password !== confirmPassword) return { ok: false, message: "Passwords do not match" };

    if (role === "Admin") {
      if (!pan || !panRegex.test(pan)) return { ok: false, message: "Enter valid PAN (Admin)" };
      // corporateInfo required for Admin per your schema:
      if (!corporateType || !corporateName || !corporatePan || !address || !city || !stateName || !pin)
        return { ok: false, message: "Complete corporate information for Admin" };
      if (!pinRegex.test(pin)) return { ok: false, message: "Enter valid PIN (6 digits)" };
      if (!panRegex.test(corporatePan)) return { ok: false, message: "Enter valid Corporate PAN" };
    } else {
      // non-admin must provide corporateId (link to existing corporate created by an Admin)
      if (!corporateIdForUser) return { ok: false, message: "Enter corporateId to link user to organization" };
    }
    return { ok: true, message: "" };
  };

  // ===== MAIN REGISTER =====
  const handleRegister = async () => {
    const v = validateBeforeSubmit();
    if (!v.ok) {
      Toast.show({ type: "error", text1: "Validation", text2: v.message, position: "top" });
      return;
    }

    setLoading(true);
    try {
      // Build payload according to your schema
      const payload: any = {
        name,
        mobile,
        email,
        password,
        role,
      };

      if (role === "Admin") {
        payload.panNumber = pan;
        payload.corporateInfo = {
          companyName: corporateName,
          companyType: corporateType,
          companyPan: corporatePan,
          companyGst: gst || "",
          address,
          city,
          state: stateName,
          pincode: pin,
        };
        // corporateId will be auto-generated by schema pre-save
      } else {
        // non-admin: include aadhaar if available and corporateId linking
        if (aadhaar) payload.aadhaarNumber = aadhaar;
        payload.corporateId = corporateIdForUser;
      }

      console.log("Register payload:", payload);

      const res = await axios.post(`${api_url}/auth/register`, payload, { timeout: 15000 });

      console.log("Register response:", res?.data);
      if (res?.data?.success) {
        Toast.show({ type: "success", text1: "Registration Success", text2: "You may login now", position: "top" });
        // navigate to login screen - adjust path if your app uses different route
        router.replace("/myscript/LoginScreen");
      } else {
        // server responded but success is false
        const msg = res?.data?.message || "Registration failed";
        Toast.show({ type: "error", text1: "Register failed", text2: msg, position: "top" });
      }
    } catch (err: any) {
      console.error("Register error (axios):", err?.response ?? err?.message ?? err);
      const serverMsg = err?.response?.data?.message || err?.message || "Network or server error";
      Toast.show({ type: "error", text1: "Error", text2: serverMsg, position: "top" });
    } finally {
      setLoading(false);
    }
  };

  const isRegisterEnabled =
    (role === "Admin" ? isFormUnlocked : true) &&
    name &&
    mobile &&
    password &&
    confirmPassword &&
    (role === "Admin"
      ? corporateType && corporateName && corporatePan && address && city && stateName && pin
      : corporateIdForUser);

  return (
    <KeyboardAvoidingView style={{ flex: 1, backgroundColor: "#fff" }} behavior={Platform.OS === "ios" ? "padding" : undefined}>
      <ScrollView contentContainerStyle={styles.container} keyboardShouldPersistTaps="handled">
        <Text style={styles.title}>User Registration</Text>

        <Text style={styles.label}>Select User Role</Text>
        <View style={styles.pickerContainer}>
          <Picker selectedValue={role} onValueChange={handleRoleChange}>
            <Picker.Item label="Select User Role" value="" />
            <Picker.Item label="Admin" value="Admin" />
            <Picker.Item label="Sale" value="Sale" />
            <Picker.Item label="Operation" value="Operation" />
          </Picker>
        </View>

        {/* PAN or Aadhaar */}
        {role === "Admin" ? (
          <TextInput
            placeholder="Enter PAN (e.g. ABCDE1234F)"
            style={styles.input}
            value={pan}
            onChangeText={handlePanChange}
            maxLength={10}
            autoCapitalize="characters"
          />
        ) : role ? (
          <TextInput
            placeholder="Enter Aadhaar (optional for non-admin)"
            style={styles.input}
            value={aadhaar}
            onChangeText={handleAadhaarChange}
            maxLength={12}
            keyboardType="number-pad"
          />
        ) : null}

        {/* non-admin: link corporateId */}
        {role && role !== "Admin" && (
          <>
            <Text style={[styles.label, { marginTop: 8 }]}>Corporate ID (link to Admin org)</Text>
            <TextInput placeholder="Enter corporateId" style={styles.input} value={corporateIdForUser} onChangeText={setCorporateIdForUser} />
          </>
        )}

        {/* Full form (unlocked for Admins when PAN valid, non-admins when corporateId provided) */}
        {((role === "Admin" && isFormUnlocked) || (role && role !== "Admin")) && (
          <>
            <TextInput placeholder="Full Name" style={styles.input} value={name} onChangeText={setName} />
            <TextInput placeholder="Mobile" style={styles.input} value={mobile} onChangeText={setMobile} keyboardType="number-pad" />
            <TextInput placeholder="Email" style={styles.input} value={email} onChangeText={setEmail} keyboardType="email-address" />
            <TextInput placeholder="Password" style={styles.input} value={password} onChangeText={setPassword} secureTextEntry />
            <TextInput placeholder="Confirm Password" style={styles.input} value={confirmPassword} onChangeText={setConfirmPassword} secureTextEntry />

            {/* Corporate info modal trigger (Admin only) */}
            {role === "Admin" && (
              <>
                <TouchableOpacity style={styles.corporateIcon} onPress={() => setModalVisible(true)}>
                  <Ionicons name="business-outline" size={28} color="#007AFF" />
                  <Text style={styles.corporateText}> Corporate Info (required for Admin)</Text>
                </TouchableOpacity>
              </>
            )}

            <TouchableOpacity
              style={[styles.registerBtn, { opacity: isRegisterEnabled ? 1 : 0.5 }]}
              onPress={handleRegister}
              disabled={!isRegisterEnabled || loading}
            >
              {loading ? <ActivityIndicator color="#fff" /> : <Text style={styles.registerText}>Register</Text>}
            </TouchableOpacity>
          </>
        )}

        {/* Corporate Modal (Admin) */}
        <Modal visible={modalVisible} animationType="slide" transparent>
          <View style={styles.modalContainer}>
            <ScrollView style={styles.modalContent} keyboardShouldPersistTaps="handled">
              <Text style={styles.modalTitle}>Corporate Information</Text>
              <Picker selectedValue={corporateType} onValueChange={setCorporateType}>
                <Picker.Item label="Select Corporate Type" value="" />
                <Picker.Item label="Sole Proprietor" value="Sole Proprietor" />
                <Picker.Item label="Partnership" value="Partnership" />
                <Picker.Item label="Private Limited" value="Private Limited" />
                <Picker.Item label="LLP" value="LLP" />
              </Picker>

              <TextInput placeholder="Company Name" style={styles.input} value={corporateName} onChangeText={setCorporateName} />
              <TextInput placeholder="Company PAN" style={styles.input} value={corporatePan} onChangeText={handleCorporatePanChange} maxLength={10} autoCapitalize="characters" />
              <TextInput placeholder="Address" style={styles.input} value={address} onChangeText={setAddress} />
              <TextInput placeholder="City" style={styles.input} value={city} onChangeText={setCity} />
              <TextInput placeholder="State" style={styles.input} value={stateName} onChangeText={setStateName} />
              <TextInput placeholder="PIN" style={styles.input} value={pin} onChangeText={setPin} keyboardType="number-pad" />
              <TextInput placeholder="GST (optional)" style={styles.input} value={gst} onChangeText={setGst} />

              <View style={styles.modalActions}>
                <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.iconButton}>
                  <Ionicons name="checkmark-circle" size={28} color="#007AFF" />
                </TouchableOpacity>
                <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.iconButton}>
                  <Ionicons name="close-circle" size={28} color="red" />
                </TouchableOpacity>
              </View>
            </ScrollView>
          </View>
        </Modal>

        <Toast />
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20, paddingBottom: 60 },
  title: { fontSize: 22, fontWeight: "700", marginBottom: 20, textAlign: "center" },
  label: { fontSize: 16, fontWeight: "600", marginTop: 10, marginBottom: 5 },
  input: { borderWidth: 1, borderColor: "#ccc", borderRadius: 10, padding: 10, marginVertical: 6 },
  pickerContainer: { borderWidth: 1, borderColor: "#ccc", borderRadius: 10, marginVertical: 6 },
  corporateIcon: { flexDirection: "row", alignItems: "center", marginVertical: 15, alignSelf: "center" },
  corporateText: { fontSize: 16, color: "#007AFF", marginLeft: 5 },
  registerBtn: { backgroundColor: "#007AFF", padding: 12, borderRadius: 10, alignItems: "center", marginTop: 10 },
  registerText: { color: "#fff", fontSize: 16, fontWeight: "600" },
  modalContainer: { flex: 1, backgroundColor: "rgba(0,0,0,0.4)", justifyContent: "center", padding: 20 },
  modalContent: { backgroundColor: "#fff", borderRadius: 12, padding: 20, maxHeight: "90%" },
  modalTitle: { fontSize: 18, fontWeight: "700", textAlign: "center", marginBottom: 10 },
  modalActions: { flexDirection: "row", justifyContent: "space-around", marginTop: 10 },
  iconButton: { padding: 10 },
});
